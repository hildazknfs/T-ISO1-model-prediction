import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import joblib
import time
import matplotlib.ticker as ticker
import numpy as np

st.set_page_config(page_title="Real-Time Temperature Prediction Dashboard", layout="wide")

st.markdown("""
<style>
html, body {
    height: 100%;
    margin: 0;
    overflow: hidden !important;
}
.stApp {
    height: 100vh;
    overflow: hidden !important;
}
div[data-testid="stHorizontalBlock"] {
    overflow: hidden !important;
}
.element-container:has(canvas) {
    display: flex;
    justify-content: center;
    align-items: center;
}
.element-container canvas {
    max-width: 100% !important;
    height: auto !important;
    display: block;
    margin: 0 auto;
}
.stSidebar {
    overflow: hidden !important;
}
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    df = pd.read_csv(r"data\cleaned_dataset.csv")
    df["t (s)"] = df["t (s)"].astype(int)
    return df

@st.cache_data
def load_model():
    return joblib.load(r"models\decision_tree_model.pkl")

df = load_data()
model = load_model()

test_size = int(len(df) * 0.2)
data_test = df.iloc[-test_size:].sort_values("t (s)").reset_index(drop=True)

feature_columns = ["t (s)", "T-iSO2"]
target_column = "T-iSO1"

if all(feature in df.columns for feature in feature_columns + [target_column]):
    data_test["Predicted"] = model.predict(data_test[feature_columns])
else:
    st.error("Required features or target not found in dataset.")
    st.stop()

st.markdown("# Real-Time Temperature Prediction Dashboard")

col1, col2 = st.columns([1, 3])

with col1:
    time_placeholder = st.metric("Time", "00:00:00")
    actual_temp_placeholder = st.metric("Actual Temperature T-iSO1", "0 °C")
    predicted_temp_placeholder = st.metric("Predicted Temperature T-iSO1", "0 °C")
    deviation_placeholder = st.metric("Deviation (Actual - Predicted)", "0.00 °C")

with col2:
    chart_placeholder = st.empty()

def stream_data():
    window_size = 5
    start_idx = 0
    for i in range(len(data_test)):
        if i >= window_size:
            start_idx = i - window_size + 1
        else:
            start_idx = 0
        subset = data_test.iloc[start_idx:i+1].copy()
        current_time_seconds = int(data_test.iloc[i]["t (s)"])
        current_time = time.strftime("%H:%M:%S", time.gmtime(current_time_seconds))
        actual_temp = round(data_test.iloc[i]["T-iSO1"], 2)
        predicted_temp = round(data_test.iloc[i]["Predicted"], 2)
        # Hitung deviasi absolut untuk iterasi ini
        deviation = abs(actual_temp - predicted_temp)
        # Update metrics
        time_placeholder.metric("Time", current_time)
        actual_temp_placeholder.metric("Actual Temperature T-iSO1", f"{actual_temp:.2f} °C")
        predicted_temp_placeholder.metric("Predicted Temperature T-iSO1", f"{predicted_temp:.2f} °C")
        deviation_placeholder.metric("Deviation (Actual - Predicted)", f"{deviation:.2f} °C")
        # Plot
        fig, ax = plt.subplots(figsize=(11, 4))
        fig.patch.set_facecolor('white')
        ax.set_facecolor('white')
        ax.plot(subset["t (s)"], subset["T-iSO1"], label='Actual', color='blue', marker='o', linestyle='solid', linewidth=1.5)
        ax.plot(subset["t (s)"], subset["Predicted"], label='Predicted', color='red', marker='^', linestyle='dashed', linewidth=1.5)
        # Menentukan warna gap antara prediksi dan aktual
        if deviation > 5:
            gap_color = 'red'  # Jika deviasi > 5°C, warna merah
        elif deviation > 2:
            gap_color = 'orange'  # Jika deviasi > 2°C dan ≤ 5°C, warna oranye
        else:
            gap_color = 'green'  # Jika deviasi ≤ 2°C, warna hijau (opsional)
        # Menambahkan shading (warna) untuk gap
        ax.fill_between(subset["t (s)"], subset["T-iSO1"], subset["Predicted"], color=gap_color, alpha=0.3)
        min_value = min(subset["T-iSO1"].min(), subset["Predicted"].min())
        max_value = max(subset["T-iSO1"].max(), subset["Predicted"].max())
        value_range = max_value - min_value
        if value_range < 0.05:
            mean_value = (min_value + max_value) / 2
            min_y = mean_value - 0.1
            max_y = mean_value + 0.1
        else:
            padding = value_range * 0.2
            min_y = min_value - padding
            max_y = max_value + padding
        ax.set_xlabel("Time (s)", fontsize=7, color='black')
        ax.set_ylabel("T-iSO1 (°C)", fontsize=7, color='black')
        ax.legend(fontsize=8)
        ax.set_title("Predicted vs Actual Temperature (Real-Time Monitoring)", fontsize=9, color='black')
        ax.grid(True, linestyle='--', alpha=0.4, color='gray')
        ax.xaxis.set_major_locator(ticker.MaxNLocator(integer=True))
        ax.set_ylim(min_y, max_y)
        tick_size = max(0.01, (max_y - min_y) / 8)
        ax.yaxis.set_major_locator(ticker.MultipleLocator(tick_size))
        ax.ticklabel_format(style='plain', axis='x')
        ax.get_xaxis().get_major_formatter().set_useOffset(False)
        plt.xticks(fontsize=8, color='black')
        plt.yticks(fontsize=8, color='black')
        chart_placeholder.pyplot(fig)
        time.sleep(1)

stream_data()